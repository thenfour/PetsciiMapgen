PETSCII map generator
twitter/@tenfour2

Command options:

-help
-listpalettes

-batchlist [keywords...]  List built-in batches containing the specified keywords
-batchrun [keywords...]   Runs built-in batches containing the specified keywords.
-batchaddarg s            Adds the specified string to args when running batch.
-batchfontdir path        base font directory
-batchbasedir path        base output directory for batch

-argsfile path            path to text file of args. each line = 1 arg, for clarity
-loadmap                  loads an existing map from the specified output
                          directory. use with -processImages* or -test* etc.
                          this will load args from the directory, and further
                          args you specify will override them.
-loadOrCreateMap          loads or creates the map. by default the map is
                          re-created even if it already exists. this will load
                          the map if it exists, create it if not.
                          Big difference between this and -loadmap is that this
                          will not load args from the target dir. it requires
                          that you specify the args yourself on the command line.
-calcn maxkeys            calculates maximum values per colorant. use
                          -pfargs and -partitions to specify other parameters.
                          *Specify -maxmem as well.

-testcolor #ff00ff        outputs an image and log testing matching a certain color
-testpalette paletteName  same as -testcolor but over a whole named palette

-partitions N or NxD      optional; default 1 flat partition.
                          N means split each dimension in N parts. the partition
                          bounds are strategically calculated.
                          NxD means you only partition the first D dimensions.
-outdir path              required to do any output
-processImagesInDir path
-processImage path

-cores N                  if N<=0, we use (processor count - N)

-pf [Square, FiveTile]    Pixel format: Square, FiveTile
-cs [LAB, HSL, NYUV, JPEG] Colorspace which defines color matching and distribution
-pfargs NvXvY+C           defines the pixel format parameters
                          N = number of discrete values per colorant
                          X = number of Luma columns per cell
                          Y = number of Luma rows per cell
                          C = 0 or 2, to include chroma information
-tessellator A|B|C        specify the tesselator for five-tile pixel format
-fonttype ID              normal, mono, colorkey, fontfamily

NORMAL
Basic grid-based font from image file.
----------------
  -charSize XxY
  -fontImage
  -leftTopPadding
  -dither 0-1

MONO
Like normal, but treats image file as monochrome and permutates the specified
palette over background & foreground.
----------------
  -charSize XxY
  -fontImage
  -palette

COLORKEY
Like mono, but allows you to specify a single colorkey which gets permutated
over the specified palette
----------------
  -charSize XxY
  -fontImage
  -palette
  -leftTopPadding
  -colorKey #112233

FONTFAMILY
Generates a font image from a typeface specified by either fontFamily or
FontFile. Glyphs used are specified in unicodeglyphTextFile.
This is unique in that it produces a text file along with images.
----------------
  -charSize XxY
  -trytofit 0 or 1         attempts to scale to fit the glyphs within the char rect.
  -fontfamily
  -fontfile
  -CharListTextFile        a utf-8 text file with a list of all characters to use as a charset.
  -unicodeglyphTextFile    file which defines the glyphs to select. not fully
                           thought through; currently only supports the format
                           at https://unicode.org/Public/emoji/12.0/emoji-test.txt
  -bgcolor
  -fgcolor
  -bgpalette
  -fgpalette
  -scale
  -shift XxY
  -aspectTolerance         Optional. Discards glyphs whose natural aspect ratio
                           are too distant. This check isn't performed if
                           omitted or invalid.
  -strictGlyphCheck 0|1    if 1, reject any glyphs that don't appear in the font
  -fontweight X            0-999 OpenType weight value.
                           100 = thin
                           300 = Light
                           400 = normal
                           700 = bold
                           900 = black/heavy
                           https://docs.microsoft.com/en-us/typography/opentype/spec/os2#usweightclass
  -fontstyle X             Normal|Italic
  -fontstretch X           https://docs.microsoft.com/en-us/dotnet/api/system.windows.fontstretches?view=netframework-4.8
                           1 = ultra condensed
                           3 = condensed
                           5 = normal
                           7 = expanded
                           9 = ultra exp
  -fontsmoothing X         Aliased
                           Cleartype
                           Grayscale

  -fontname                Optional, for file naming because the calculated
                           font family name can be long.
