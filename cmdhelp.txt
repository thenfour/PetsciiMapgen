PETSCII map generator
twitter/@tenfour2

Command options:

-help
-listpalettes

-argsfile path            path to text file of args. each line = 1 arg, for clarity
-loadmap path             loads an existing map from the specified output
                          directory. use with -processImages* or -test* etc.
-calcn maxkeys            calculates maximum values per colorant. use
                          -pfargs and -partitions to specify other parameters.
                          *Specify -maxmem as well.

-testcolor #ff00ff        outputs an image and log testing matching a certain color
-testpalette              same as -testcolor but over a whole named palette

-partitions NxN           optional; default 1 flat partition
-outdir path              required to do any output
-processImagesInDir path
-processImage path

-cores N                  if N<=0, we use (processor count - N)

-pf ID                    Pixel format: YUV, LAB, HSL, YUV5
-cs ID                    Colorspace: LAB, HSL, NYUV, JPEG
-pfargs NvXvY+C           defines the pixel format parameters
                          N = number of discrete values per colorant
                          X = number of Luma columns per cell
                          Y = number of Luma rows per cell
                          C = 0 or 2, to include chroma information
-yuv5rot 0.0-1.0          For the YUV5 pixelformat, specifies the amount of
                          rotation of the tile grid. Default = .5.

-fonttype ID              normal, mono, colorkey, fontfamily

NORMAL
Basic grid-based font from image file.
----------------
  -charSize XxY
  -fontImage
  -leftTopPadding
  -dither 0-1

MONO
Like normal, but treats image file as monochrome and permutates the specified
palette over background & foreground.
----------------
  -charSize XxY
  -fontImage
  -palette

COLORKEY
Like mono, but allows you to specify a single colorkey which gets permutated
over the specified palette
----------------
  -charSize XxY
  -fontImage
  -palette
  -leftTopPadding
  -colorKey #112233

FONTFAMILY
Generates a font image from a typeface specified by either fontFamily or
FontFile. Glyphs used are specified in unicodeglyphTextFile.
This is unique in that it produces a text file along with images.
----------------
  -charSize XxY
  -trytofit 0 or 1         attempts to scale to fit the glyphs within the char rect.
  -fontfamily
  -fontfile
  -CharListTextFile        a utf-8 text file with a list of all characters to use as a charset.
  -unicodeglyphTextFile    file which defines the glyphs to select. not fully
                           thought through; currently only supports the format
                           at https://unicode.org/Public/emoji/12.0/emoji-test.txt
  -bgcolor
  -fgcolor
  -scale
  -shift XxY
  -aspectTolerance         Optional. Discards glyphs whose natural aspect ratio
                           are too distant. This check isn't performed if
                           omitted or invalid.
  -fontname                Optional, for file naming because the calculated
                           font family name can be long.
